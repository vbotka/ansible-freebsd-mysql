---
# /root/.mysql_secret should be created when mysql-server starts for
# the first time. Let's store the secret in bsd_mysql_secret_local_file.
#
# * 4.4.2 mysql_install_db â€” Initialize MySQL Data Directory
#   https://dev.mysql.com/doc/refman/5.7/en/mysql-install-db.html
# * 2.10.4 Securing the Initial MySQL Account
#   https://dev.mysql.com/doc/refman/8.0/en/default-privileges.html
# * 2.10.1 Initializing the Data Directory
#          Post-Initialization root Password Assignment
#   https://dev.mysql.com/doc/refman/8.0/en/data-directory-initialization.html#data-directory-initialization-password-assignment

- name: "Secret: Create local directory'{{ bsd_mysql_secret_local_dir }}'"
  ansible.builtin.file:
    state: directory
    path: "{{ bsd_mysql_secret_local_dir }}"
    mode: "0700"
  delegate_to: localhost

# Store the temporary secret into the file bsd_mysql_secret_local_file
- name: "Secret: Create '{{ bsd_mysql_secret_file }}'"
  when: bsd_mysql_secret_local_file is not exists

  # Read temporary password from the local file bsd_mysql_secret_local_file
  block:
    - name: "Secret: Read temporary password from {{ bsd_mysql_secret_file }}"
      ansible.builtin.command:
        cmd: >
          tail -1 {{ bsd_mysql_secret_file }}
      register: result
      no_log: "{{ not bsd_mysql_debug_classified|bool }}"
    - name: "Secret: Set variable bsd_mysql_secret_temp"
      ansible.builtin.set_fact:
        bsd_mysql_secret_temp: "{{ result.stdout }}"
      no_log: "{{ not bsd_mysql_debug_classified|bool }}"
    - name: "Secret: Debug variable bsd_mysql_secret_temp"
      ansible.builtin.debug:
        var: bsd_mysql_secret_temp
      when: bsd_mysql_debug_classified|bool
    - name: "Secret: Store bsd_mysql_secret_temp in local file {{ bsd_mysql_secret_local_file }}"
      ansible.builtin.template:
        src: mysql_secret.j2
        dest: "{{ bsd_mysql_secret_local_file }}"
        owner: "{{ bsd_mysql_secret_local_file_owner }}"
        mode: "{{ bsd_mysql_secret_local_file_mode }}"
      delegate_to: localhost
      no_log: "{{ not bsd_mysql_debug_classified|bool }}"
- name: "Secret: Read '{{ bsd_mysql_secret_local_file }}'"
  when: bsd_mysql_secret_local_file is exists

  # Change temporary password for bsd_mysql_login_user (root)
  block:
    - name: "Secret: Set bsd_mysql_secret_temp from localhost {{ bsd_mysql_secret_local_file }}"
      ansible.builtin.set_fact:
        bsd_mysql_secret_temp: "{{ lookup('file', bsd_mysql_secret_local_file) }}"
      no_log: "{{ not bsd_mysql_debug_classified|bool }}"
    - name: "Secret: Debug variable bsd_mysql_secret_temp"
      ansible.builtin.debug:
        var: bsd_mysql_secret_temp
      when: bsd_mysql_debug_classified|bool
- name: "Secret: Change temporary password for '{{ bsd_mysql_login_user }}'"
  block:
    - name: "Secret: Block: Change temporary password for '{{ bsd_mysql_login_user }}'"
      community.mysql.mysql_user:
        login_user: "{{ bsd_mysql_login_user }}"
        login_password: "{{ bsd_mysql_secret_temp }}"
        name: "{{ bsd_mysql_login_user }}"
        password: "{{ bsd_mysql_secret }}"
        sql_log_bin: false
      no_log: "{{ not bsd_mysql_debug_classified|bool }}"
  rescue:
    - name: "Secret: Rescue change temporary password for '{{ bsd_mysql_login_user }}' failed"
      ansible.builtin.debug:
        msg: "[ERROR] Change temporary password for '{{ bsd_mysql_login_user }}' failed."
    - name: "Secret: HOWTO change temporary password for '{{ bsd_mysql_login_user }}'"
      ansible.builtin.debug:
        msg: "{{ '{}'.format(msg) }}"
      vars:
        msg: |-
          HOWTO change temporary password for {{ bsd_mysql_login_user }} manually.
          Login with temporary password '{{ bsd_mysql_secret_temp }}'
          and change password to '{{ bsd_mysql_secret }}'

          shell> mysql -u root -p
          > ALTER USER 'root'@'localhost' IDENTIFIED BY '{{ bsd_mysql_secret }}';
          > exit
      when: bsd_mysql_debug_classified|bool

# Optionaly backup the remote file bsd_mysql_secret_file with temporary password
- name: "Secret: backup remote file '{{ bsd_mysql_secret_file }}'"
  ansible.builtin.copy:
    remote_src: true
    src: "{{ bsd_mysql_secret_file }}"
    dest: "{{ bsd_mysql_secret_file_backup_path }}"
    owner: root
    group: wheel
    mode: "0600"
  when: bsd_mysql_secret_file_backup|bool

# Optionaly remove the remote file bsd_mysql_secret_file with temporary password
- name: "Secret: Remove remote file '{{ bsd_mysql_secret_file }}'"
  ansible.builtin.file:
    state: absent
    path: "{{ bsd_mysql_secret_file }}"
  when: bsd_mysql_secret_file_remove|bool

# EOF
